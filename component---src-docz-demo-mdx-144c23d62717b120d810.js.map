{"version":3,"sources":["webpack:///../src/__docz__/demo.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","style","border","padding","isMDXComponent"],"mappings":"mQASaA,G,UAAe,S,uMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,8BACA,uDAAsC,iBAAGC,WAAW,IAChD,KAAQ,uCAD0B,YAAtC,oBAE0C,iBAAGA,WAAW,IACpD,KAAQ,uCAD8B,YAF1C,QAI8B,iBAAGA,WAAW,IACxC,KAAQ,2CADkB,gBAJ9B,iBAOA,sBACE,kBAAIA,WAAW,MAAf,WAAgC,iBAAGA,WAAW,KAC1C,KAAQ,gDADoB,kCAAhC,eAGA,kBAAIA,WAAW,MAAf,8CAAmE,iBAAGA,WAAW,KAC7E,KAAQ,oDADuD,iBAAnE,KAGA,kBAAIA,WAAW,MAAf,OAA4B,iBAAGA,WAAW,KACtC,KAAQ,+CADgB,WAA5B,yFAGA,kBAAIA,WAAW,MAAf,6EACA,kBAAIA,WAAW,MAAf,iHACA,kBAAIA,WAAW,MAAf,+CAAoE,iBAAGA,WAAW,KAC9E,KAAQ,2CADwD,aAApE,KAGA,kBAAIA,WAAW,MAAf,0CAEF,mBAAKC,MAAO,CACVC,OAAQ,oBACRC,QAAS,SAEb,YAAC,IAAD,CAAiBJ,QAAQ,qBAEvB,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBADZ,8jN,qMAqOTJ,EAAWQ,gBAAiB","file":"component---src-docz-demo-mdx-144c23d62717b120d810.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-use-precision-timer/react-use-precision-timer/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { UseTimerExample } from '../__docz__/components/UseTimerExample';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>Demo</h1>\n    <p>{`The following is a demo of the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-use-precision-timer/useTimer\"\n      }}>{`useTimer`}</a>{` hook (which the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-use-precision-timer/useDelay\"\n      }}>{`useDelay`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/react-use-precision-timer/useStopwatch\"\n      }}>{`useStopwatch`}</a>{` hooks wrap).`}</p>\n    <ul>\n      <li parentName=\"ul\">{`You can `}<a parentName=\"li\" {...{\n          \"href\": \"/react-use-precision-timer/useTimer#mutators\"\n        }}>{`start, stop, pause, and resume`}</a>{` the timer.`}</li>\n      <li parentName=\"ul\">{`You can also configure the delay and other `}<a parentName=\"li\" {...{\n          \"href\": \"/react-use-precision-timer/useTimer#timeroptions\"\n        }}>{`timer options`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`All `}<a parentName=\"li\" {...{\n          \"href\": \"/react-use-precision-timer/useTimer#getters\"\n        }}>{`getters`}</a>{` are shown so you can see what's happening under the hood. Times are in milliseconds.`}</li>\n      <li parentName=\"ul\">{`When the timer fires, the \"Callback time\" is updated to the current time.`}</li>\n      <li parentName=\"ul\">{`The \"Render every X ms\" setting allows you to choose how often the demo renders when the timer isn't firing.`}</li>\n      <li parentName=\"ul\">{`Set the delay to 0 to turn the timer into a `}<a parentName=\"li\" {...{\n          \"href\": \"/react-use-precision-timer/useStopwatch\"\n        }}>{`stopwatch`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`Code is provided below for reference.`}</li>\n    </ul>\n    <div style={{\n      border: 'solid 2px #67788a',\n      padding: '20px'\n    }}>\n  <UseTimerExample mdxType=\"UseTimerExample\" />\n    </div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import * as React from 'react';\nimport { useTimer } from 'react-use-precision-timer';\n\nexport function UseTimerExample() {\n  const [delay, setDelay] = React.useState(1000);\n  const [callbackTime, setCallbackTime] = React.useState(-1);\n  const [runOnce, setRunOnce] = React.useState(false);\n  const [fireImmediately, setFireImmediately] = React.useState(false);\n  const [startImmediately, setStartImmediately] = React.useState(true);\n  const [delayChanged, setDelayChanged] = React.useState(false);\n  const [renderTime, setRenderTime] = React.useState(new Date().getTime());\n  const [frameRate, setFrameRate] = React.useState(10);\n  const callback = () => {\n    setCallbackTime(new Date().getTime());\n  };\n  const timer = useTimer({\n    delay,\n    callback,\n    runOnce,\n    fireImmediately,\n    startImmediately,\n    fireOverdueCallbacks: true,\n  });\n\n  React.useEffect(() => {\n    const timeout = setTimeout(() => setRenderTime(new Date().getTime()), frameRate);\n    return () => {\n      clearTimeout(timeout);\n    };\n  });\n\n  // Automatically start or stop when the delay changes.\n  React.useEffect(() => {\n    if (delayChanged) {\n      setDelayChanged(false);\n      if (startImmediately) {\n        timer.start();\n      } else {\n        timer.stop();\n      }\n    }\n  }, [delay, delayChanged, startImmediately, timer]);\n\n  return (\n    <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n      <div>\n        <div>\n          <div>\n            <div>\n              Delay:{' '}\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"5000\"\n                value={delay}\n                onChange={e => {\n                  const newDelay = parseInt(e.target.value);\n                  setDelay(newDelay);\n                  setDelayChanged(true);\n                  if (newDelay === 0) {\n                    setCallbackTime(-1);\n                  }\n                }}\n              />{' '}\n              {delay > 0 ? \\`\\${delay} ms\\` : 'Stopwatch'}\n            </div>\n          </div>\n          <div>\n            <input\n              type=\"checkbox\"\n              id=\"runOnce\"\n              name=\"runOnce\"\n              checked={runOnce}\n              onChange={e => setRunOnce(e.target.checked)}\n            />\n            <label htmlFor=\"runOnce\"> runOnce</label>\n            <input\n              type=\"checkbox\"\n              id=\"fireImmediately\"\n              name=\"fireImmediately\"\n              checked={fireImmediately}\n              onChange={e => setFireImmediately(e.target.checked)}\n            />\n            <label htmlFor=\"fireImmediately\"> fireImmediately</label>\n            <input\n              type=\"checkbox\"\n              id=\"startImmediately\"\n              name=\"startImmediately\"\n              checked={startImmediately}\n              onChange={e => setStartImmediately(e.target.checked)}\n            />\n            <label htmlFor=\"startImmediately\"> startImmediately</label>\n            <br />\n          </div>\n        </div>\n        <div>\n          <button\n            onClick={() => {\n              timer.start();\n            }}\n          >\n            Start\n          </button>\n          <button\n            onClick={() => {\n              timer.stop();\n            }}\n          >\n            Stop\n          </button>\n          <button\n            onClick={() => {\n              timer.pause();\n            }}\n          >\n            Pause\n          </button>\n          <button\n            onClick={() => {\n              timer.resume();\n            }}\n          >\n            Resume\n          </button>\n        </div>\n        <div>\n          {delay > 0 && (\n            <progress value={timer.isStopped() ? 0 : delay - timer.getRemainingTime()} max={delay}>\n              {timer.getRemainingTime()}\n            </progress>\n          )}\n        </div>\n        <table>\n          <tbody>\n            <tr>\n              <td>Callback time:</td>\n              <td>{callbackTime}</td>\n            </tr>\n            <tr>\n              <td>isStarted():</td>\n              <td>{timer.isStarted() + ''}</td>\n            </tr>\n            <tr>\n              <td>isStopped():</td>\n              <td>{timer.isStopped() + ''}</td>\n            </tr>\n            <tr>\n              <td>isPaused():</td>\n              <td>{timer.isPaused() + ''}</td>\n            </tr>\n            <tr>\n              <td>isRunning():</td>\n              <td>{timer.isRunning() + ''}</td>\n            </tr>\n            <tr>\n              <td>getStartTime():</td>\n              <td>{timer.getStartTime()}</td>\n            </tr>\n            <tr>\n              <td>getLastFireTime():</td>\n              <td>{timer.getLastFireTime()}</td>\n            </tr>\n            <tr>\n              <td>getNextFireTime():</td>\n              <td>{timer.getNextFireTime()}</td>\n            </tr>\n            <tr>\n              <td>getPauseTime():</td>\n              <td>{timer.getPauseTime()}</td>\n            </tr>\n            <tr>\n              <td>getResumeTime():</td>\n              <td>{timer.getResumeTime()}</td>\n            </tr>\n            <tr>\n              <td>getRemainingTime():</td>\n              <td>{timer.getRemainingTime()}</td>\n            </tr>\n            <tr>\n              <td>getElapsedStartedTime():</td>\n              <td>{timer.getElapsedStartedTime()}</td>\n            </tr>\n            <tr>\n              <td>getElapsedRunningTime():</td>\n              <td>{timer.getElapsedRunningTime()}</td>\n            </tr>\n            <tr>\n              <td>getTotalElapsedPausedTime():</td>\n              <td>{timer.getTotalElapsedPausedTime()}</td>\n            </tr>\n            <tr>\n              <td>getPeriodElapsedPausedTime():</td>\n              <td>{timer.getPeriodElapsedPausedTime()}</td>\n            </tr>\n            <tr>\n              <td>getElapsedResumedTime():</td>\n              <td>{timer.getElapsedResumedTime()}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div style={{ textAlign: 'center', border: 'solid 2px lightgray', padding: '10px' }}>\n        <div>\n          Render every:\n          <br />\n          {frameRate} ms\n        </div>\n        <div>\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"5000\"\n            value={frameRate}\n            onChange={e => {\n              setFrameRate(parseInt(e.target.value));\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}